import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
    id("com.github.johnrengelman.shadow") version "5.2.0"
}

val backEndDir by extra(projectDir.resolve("src/backEnd"))
val frontEndDir by extra(projectDir.resolve("src/frontEnd"))
val webDir by extra(
    System.getenv("WEB_DIR")?.let {
        File(it)
    } ?: projectDir.resolve("artifacts/web")
)
val devMode by extra((System.getenv("DEV_MODE") ?: "true").toBoolean())

kotlin {
    js(IR) {
        browser {
            distribution {
                directory = webDir.resolve("js")
            }

            webpackTask {
                outputFileName = "browser-game.js"
            }

            testTask {
                enabled = false
            }
        }

        binaries.executable()
    }

    jvm {
        val main by compilations.getting {
            kotlinOptions {
                jvmTarget = "12"
            }
        }

        val test by compilations.getting {
            kotlinOptions {
                jvmTarget = "12"
            }
        }
    }

    sourceSets {
        val jsMain by getting {
            kotlin.srcDir(frontEndDir.resolve("js"))
            dependencies {
                implementation(project(":core"))
                implementation("org.jetbrains.kotlinx:kotlinx-html-js:0.7.3")
            }
        }

        val jvmMain by getting {
            kotlin.srcDir(backEndDir.resolve("jvm"))
            dependencies {
                implementation("io.ktor:ktor-server-netty:1.3.+")
                implementation("ch.qos.logback:logback-classic:1.2.+")
            }
        }
    }
}

tasks {
    register("assembleWeb") {
        val deps = mutableListOf("assembleHtml", "assembleCss")
        if (devMode) {
            deps.add("jsBrowserDevelopmentWebpack")
        } else {
            deps.add("jsBrowserProductionWebpack")
        }

        dependsOn(deps)
    }

    register<Delete>("cleanWeb") {
        delete(webDir)
    }

    register<Copy>("assembleHtml") {
        from(frontEndDir.resolve("html"))
        into(webDir)
        doLast {
            webDir.listFiles()?.filter {
                it.name.endsWith(".html")
            }?.forEach {
                it.writeText("<!-- AUTOGENERATED FILE. DO NOT EDIT. -->\n${it.readText()}")
            }
        }
    }

    register<Copy>("assembleCss") {
        from(frontEndDir.resolve("css"))
        into(webDir.resolve("css"))
        doLast {
            webDir.resolve("css").listFiles()?.filter {
                it.name.endsWith(".css")
            }?.forEach {
                it.writeText("/* AUTOGENERATED FILE. DO NOT EDIT. */\n${it.readText()}")
            }
        }
    }

    register<ShadowJar>("runnableServerJar") {
        manifest {
            attributes["Main-Class"] = "ServerKt"
        }
        archiveClassifier.set("all")
        val jvmMainCompilation = kotlin.jvm().compilations.getByName("main")
        from(jvmMainCompilation.output)
        configurations = mutableListOf(jvmMainCompilation.compileDependencyFiles as Configuration)
        archiveFileName.set("server.jar")
    }

    register<Exec>("runServer") {
        dependsOn("runnableServerJar", "assembleWeb")
        environment(mapOf("STATIC_FILES_DIR" to webDir.absolutePath))
        commandLine("java", "-jar", buildDir.resolve("libs/server.jar").absolutePath)
    }
}
