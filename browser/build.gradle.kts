plugins {
    kotlin("multiplatform") version "1.3.61"
}

val webDir by extra("artifacts/web")
val devMode = (System.getenv("DEV_MODE") ?: "true").toBoolean()

kotlin {
    js {
        val main by compilations.getting {
            kotlinOptions {
                moduleKind = "umd"
            }
        }
    }

    sourceSets {
        val jsMain by getting {
            kotlin.srcDir("src/js")
            dependencies {
                implementation(project(":core"))
                implementation(kotlin("stdlib-js"))
                implementation("org.jetbrains.kotlinx:kotlinx-html-js:0.7.1")
            }
        }
    }
}

tasks {
    register("assembleWeb") {
        dependsOn("assembleHtml", "assembleCss", "assembleJs")
    }

    register<Delete>("cleanWeb") {
        delete(webDir)
    }

    register<Copy>("assembleHtml") {
        from(file("src/html"))
        into(file(webDir))
        doLast {
            file(webDir).listFiles()?.filter {
                it.name.endsWith(".html")
            }?.forEach {
                it.writeText("<!-- AUTOGENERATED FILE. DO NOT EDIT. -->\n${it.readText()}")
            }
        }
    }

    register<Copy>("assembleCss") {
        from(file("src/css"))
        into(file("${webDir}/css"))
        doLast {
            file("${webDir}/css").listFiles()?.filter {
                it.name.endsWith(".css")
            }?.forEach {
                it.writeText("/* AUTOGENERATED FILE. DO NOT EDIT. */\n${it.readText()}")
            }
        }
    }

    register<Copy>("assembleJs") {
        dependsOn("jsMainClasses")

        if (devMode) {
            val jsJar = { regex: String ->
                configurations.getByName("jsRuntimeClasspath").single {
                    it.name.matches(Regex(regex))
                }
            }

            val stdLib = jsJar("kotlin-stdlib-js-.+\\.jar")
            val kotlinxHtml = jsJar("kotlinx-html-js-.+\\.jar")
            val tetrisCore = jsJar("core-js.jar")
            from(zipTree(stdLib), zipTree(kotlinxHtml), zipTree(tetrisCore), getByName("compileKotlinJs"))
            include { fileTreeElement ->
                val path = fileTreeElement.path
                (path.endsWith(".js") || path.endsWith(".js.map")) &&
                    (path.startsWith("META-INF/resources/") || !path.startsWith("META-INF/"))
            }
        } else {
            from(getByName("runDceJsKotlin"))
        }

        includeEmptyDirs = false
        into(file("${webDir}/js"))

        doLast {
            file("${webDir}/js").listFiles()?.filter {
                it.name.endsWith(".js")
            }?.forEach {
                it.writeText("/* AUTOGENERATED FILE. DO NOT EDIT. */\n${it.readText()}")
            }
        }
    }
}